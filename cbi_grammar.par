/~
	Grammar for the Casio (calculator) Basic Interpreter
  written in JS/CC
	by Francois Crevola
~/
	
!	' |\r|\n|\t'

  "IF"
  "THEN"
  "ELSE"
  "IFEND"
  "WHILE"
  "WHILEEND"
  "DO"
  "LPWHILE"
  "SAY"
  "WRITE"
  "READ"
  "ISZ"
  "DSZ"
  "LBL"
  "GOTO"
  "PROG"
  "PLOT"
  "PLOTON"
  "PLOTOFF"
  "PLOTCHG"
  "PXLON"
  "PXLOFF"
  "PXLCHG"
  "PXLTEST"
  "RANGE"
  "VIEWWINDOW"
  "LINE"
  "F-LINE"
  "HORIZONTAL"
  "VERTICAL"
  "RETURN"
  "CLS"
  "CLRTEXT"
  "MCL"
  "RAN"
  "DEG"
  "RAD"
  "GRAD"
  "INT"
  "FRAC"
  "INTG"
  "LOCATE"
  "TEXT"
  "COS"
  "SIN"
  "TAN"
  "REC\("
  "POL\("
  "_DISP_"
  ','
  '~'
  '{'
  '}'
  '\['
  '\]'
  ';'
  ':'
  '='
  '->'
  '\?'
  '=>'
  '=='
  '!='
  '<>'
  '<='
  '>='
  '>'
  '<'
  '\+'
  '\-'
  '/'
  '\*'
  '\('
  '\)'
  '#'
  '[A-Z]'	Letter
  '\"([^\"]|\"\")*\"'		String		[* %match = %match.substr( 1, %match.length - 2 ); %match = %match.replace( /''/g, "\'" );	*]
  '[0-9]+'			Integer
  '[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'	Float
  ;

##

Program:
		Program Stmt [* prgNodes.push(%2); *]
		|
		;

Stmt_List:
		Stmt_List Stmt			[* %% = createNode( NODE_OP, OP_NONE, %1, %2 ); *]
		|
		;

Stmt:
		Expression '=>' Stmt    [* %% = createNode( NODE_OP, OP_IF, %1, %3 ); *]
		| IF Expression ':' THEN Stmt_List IFEND ':'	[* %% = createNode( NODE_OP, OP_IF, %2, %5 ); *]
		| IF Expression ':' THEN Stmt_List ELSE Stmt_List IFEND [* %% = createNode( NODE_OP, OP_IF_ELSE, %2, %5, %7 ); *]
		| WHILE Expression ':' Stmt_List WHILEEND	[* %% = createNode( NODE_OP, OP_WHILE_DO, %2, %4 ); *]
		| DO ':' Stmt_List LPWHILE Expression ':'	[* %% = createNode( NODE_OP, OP_DO_WHILE, %3, %5 ); *]
		| SAY String ':'		[* %% = createNode( NODE_OP, OP_SAY, %2 ); *]
		| String ':'		[* %% = createNode( NODE_OP, OP_SAY, %1 ); *]
		| String '?' '->' VariableCasio ':'		[* %% = createNode( NODE_OP, OP_INPUT, %1, %4 ); *]
		| '?' '->' VariableCasio ':'		[* %% = createNode( NODE_OP, OP_INPUT, "", %3 ); *]
		| WRITE Expression ':'		[* %% = createNode( NODE_OP, OP_WRITE, %2 ); *]
		| Expression ':'		[* %% = createNode( NODE_OP, OP_WRITE, %1 ); *]
		| LBL Integer ':'		[* prgLabels["_"+%2] = prgNodes.length + 1; %% = createNode( NODE_OP, OP_REG_LBL, %2 ); *]
		| LBL Letter ':'		[* prgLabels["_"+%2] = prgNodes.length + 1; %% = createNode( NODE_OP, OP_REG_LBL, %2 ); *]
		| GOTO Integer ':'		[* %% = createNode( NODE_OP, OP_GOTO, %2 ); *]
		| GOTO Letter ':'		[* %% = createNode( NODE_OP, OP_GOTO, %2 ); *]
		| PROG Integer ':'		[* %% = createNode( NODE_OP, OP_PROG_CALL, %2 ); *]
		| PROG Letter ':'		[* %% = createNode( NODE_OP, OP_PROG_CALL, %2 ); *]
		| PROG String ':'		[* %% = createNode( NODE_OP, OP_PROG_CALL, %2 ); *]
		| Expression '->' VariableCasio '~' VariableCasio ':'[* %% = createNode( NODE_OP, OP_ASSIGN, %1, %3, %5 ); *]
		| Expression '->' VariableCasio ':'[* %% = createNode( NODE_OP, OP_ASSIGN, %1, %3 ); *]
		| ISZ VariableCasio ':'[* %% = createNode( NODE_OP, OP_INCR, %2 ); *]
		| DSZ VariableCasio ':'[* %% = createNode( NODE_OP, OP_DECR, %2 ); *]
		| PLOT Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_PLOT, %2, %4 ); *]
		| PLOTON Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_PLOT_ON, %2, %4 ); *]
		| PLOTOFF Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_PLOT_OFF, %2, %4 ); *]
		| PLOTCHG Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_PLOT_CHG, %2, %4 ); *]
		| PXLON Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_PXL_ON, %2, %4 ); *]
		| PXLOFF Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_PXL_OFF, %2, %4 ); *]
		| PXLCHG Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_PXL_CHG, %2, %4 ); *]
		| "REC\(" Expression ',' Expression '\)' ':' [* %% = createNode( NODE_OP, OP_REC, %2, %4 ); *]
		| "POL\(" Expression ',' Expression '\)' ':' [* %% = createNode( NODE_OP, OP_POL, %2, %4 ); *]
		| HORIZONTAL Expression ':' [* %% = createNode( NODE_OP, OP_HORIZONTAL, %2 ); *]
		| VERTICAL Expression ':' [* %% = createNode( NODE_OP, OP_VERTICAL, %2 ); *]
		| RANGE Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_RANGE, %2, %4, %6, %8, %10, %12 ); *]
		| VIEWWINDOW Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_RANGE, %2, %4, %6, %8, %10, %12 ); *]
		| F-LINE Expression ',' Expression ',' Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_FLINE, %2, %4, %6, %8 ); *]
		| LOCATE Expression ',' Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_LOCATE, %2, %4, %6); *]
		| LOCATE Expression ',' Expression ',' String ':' [* %% = createNode( NODE_OP, OP_LOCATE, %2, %4, %6); *]
		| TEXT Expression ',' Expression ',' Expression ':' [* %% = createNode( NODE_OP, OP_TEXT, %2, %4, %6); *]
		| TEXT Expression ',' Expression ',' String ':' [* %% = createNode( NODE_OP, OP_TEXT, %2, %4, %6); *]
		| RETURN ':' [* %% = createNode( NODE_OP, OP_RETURN ); *]
		| DEG ':' [* %% = createNode( NODE_OP, OP_DEG ); *]
		| RAD ':' [* %% = createNode( NODE_OP, OP_RAD ); *]
		| GRAD ':' [* %% = createNode( NODE_OP, OP_GRAD ); *]
		| _DISP_ ':' [* %% = createNode( NODE_OP, OP_DISP ); *]
		| LINE ':' [* %% = createNode( NODE_OP, OP_LINE ); *]
		| CLRTEXT ':' [* %% = createNode( NODE_OP, OP_CLEARTEXT ); *]
		| CLS ':' [* %% = createNode( NODE_OP, OP_CLS ); *]
		| MCL ':' [* %% = createNode( NODE_OP, OP_MCL ); *]
		| '{' Stmt_List '}'		[* %% = %2; *]
		| ':' [* %% = createNode( NODE_OP, OP_NONE ); *]
		;

Expression:
		Expression '=' AddSubExp	[* %% = createNode( NODE_OP, OP_EQU, %1, %3 ); *]
		| Expression '<' AddSubExp	[* %% = createNode( NODE_OP, OP_LOT, %1, %3 ); *]
		| Expression '>' AddSubExp	[* %% = createNode( NODE_OP, OP_GRT, %1, %3 ); *]
		| Expression '<=' AddSubExp	[* %% = createNode( NODE_OP, OP_LOE, %1, %3 ); *]
		| Expression '>=' AddSubExp	[* %% = createNode( NODE_OP, OP_GRE, %1, %3 ); *]
		| Expression '!=' AddSubExp	[* %% = createNode( NODE_OP, OP_NEQ, %1, %3 ); *]
		| Expression '<>' AddSubExp	[* %% = createNode( NODE_OP, OP_NEQ, %1, %3 ); *]
		| PXLTEST Expression ',' AddSubExp [* %% = createNode( NODE_OP, OP_PXL_TEST, %2, %4 ); *]
		| AddSubExp
		;

AddSubExp:
		AddSubExp '-' MulDivExp		[* %% = createNode( NODE_OP, OP_SUB, %1, %3 ); *]
		| AddSubExp '+' MulDivExp	[* %% = createNode( NODE_OP, OP_ADD, %1, %3 ); *]
		| MulDivExp
		;

MulDivExp:
		MulDivExp '*' NegExp		[* %% = createNode( NODE_OP, OP_MUL, %1, %3 ); *]
		| MulDivExp '/' NegExp		[* %% = createNode( NODE_OP, OP_DIV, %1, %3 ); *]
		| NegExp
		;

NegExp:
		'-' Value [* %% = createNode( NODE_OP, OP_NEG, %2 ); *]
		| Value
		| COS Value [* %% = createNode( NODE_OP, OP_COS, %2 ); *]
		| SIN Value [* %% = createNode( NODE_OP, OP_SIN, %2 ); *]
		| TAN Value [* %% = createNode( NODE_OP, OP_TAN, %2 ); *]
		| INT Value [* %% = createNode( NODE_OP, OP_INT, %2 ); *]
		| FRAC Value [* %% = createNode( NODE_OP, OP_FRAC, %2 ); *]
		| INTG Value [* %% = createNode( NODE_OP, OP_INTG, %2 ); *]
		;

Value:
		Value VariableCasio [* %% = createNode( NODE_OP, OP_MUL, %1, %2 ); *]
		| Integer [* %% = createNode( NODE_CONST, %1 ); *]
		| Float [* %% = createNode( NODE_CONST, %1 ); *]
		| VariableCasio [* %% = %1; *]
		| Value '(' Expression ')' [* %% = createNode( NODE_OP, OP_MUL, %1, %3 ); *]
		| '(' Expression ')' [* %% = %2; *]
		| RAN '#' [* %% = createNode( NODE_OP, OP_RANDOM ); *]
		;

VariableCasio:
		Letter '[' Expression ']' [* %% = createNode( NODE_OP, OP_READVAR, %1, %3 ); *]
		| Letter [* %% = createNode( NODE_VAR, %1 ); *]
		;
