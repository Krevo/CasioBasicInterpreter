/~
  Grammar for the Casio Basic Web Interpreter
  written in JS/CC
  by Francois Crevola
~/

!	' |\r|\n|\t'

  "AXESON"
  "AXESOFF"
  "COORDOFF"
  "COORDON"
  "GRIDON"
  "GRIDOFF"
  "GRIDLINE"
  "LABELON"
  "LABELOFF"
  "FUNCON"
  "FUNCOFF"
  "IF"
  "THEN"
  "ELSE"
  "IFEND"
  "WHILE"
  "WHILEEND"
  "DO"
  "LPWHILE"
  "SAY"
  "WRITE"
  "FOR"
  "TO"
  "STEP"
  "NEXT"
  "BREAK"
  "READ"
  "ISZ"
  "DSZ"
  "LBL"
  "GOTO"
  "GETKEY"
  "NOT"
  "OR"
  "XOR"
  "AND"
  "LIST"
  "MAT"
  "DIM"
  "PROG"
  "PLOT"
  "PLOTON"
  "PLOTOFF"
  "PLOTCHG"
  "PXLON"
  "PXLOFF"
  "PXLCHG"
  "PXLTEST"
  "RANGE"
  "VIEWWINDOW"
  "LINE"
  "F-LINE"
  "HORIZONTAL"
  "VERTICAL"
  "CIRCLE"
  "RETURN"
  "STOP"
  "CLS"
  "CLRTEXT"
  "CLRGRAPH"
  "CLRLIST"
  "CLRMAT"
  "FILE"
  "SEQ\("
  "MCL"
  "RAN"
  "RANINT#"
  "DEG"
  "RAD"
  "GRAD"
  "INT"
  "ABS"
  "MOD"
  "FRAC"
  "INTG"
  "LOCATE"
  "TEXT"
  "COS"
  "SIN"
  "TAN"
  "REC\("
  "POL\("
  "_DISP_"
  "PLOT/LINE-COLOR"
  "S-L-NORMAL"
  "S-L-DOT"
  "S-L-BROKEN"
  "S-L-THICK"
  "S-L-THIN"
  "BG-NONE"
  "BG-PICT"
  "STOPICT"
  "RCLPICT"
  "PI"
  "ANS"
  "XMIN"
  "XMAX"
  "XSCL"
  "XDOT"
  "YMIN"
  "YMAX"
  "YSCL"
  "TTMIN"
  "TTMAX"
  "TTPTCH"
  "SORTA"
  "SORTD"
  "MIN"
  "MAX"
  "SUM"
  "PROD"
  "MEAN"
  "MEDIAN"
  "FILL"
  "AUGMENT"
  "CUML"
  "PERCENT"
  "RANLIST#\("
  "MAT\->LIST\("
  "LIST->MAT\("
  "\?LIST"
  "MENU"
  "TRN"
  "GRAPH\(X,Y\)=\("
  "G-CONNECT"
  "G-PLOT"
  ','
  '~'
  '{'
  '}'
  '\['
  '\]'
  ';'
  ':'
  '='
  '->'
  '\?'
  '=>'
  '=='
  '!='
  '<>'
  '<='
  '>='
  '>'
  '<'
  '\+'
  '\-'
  '/'
  '\*'
  '\('
  '\)'
  '#'
  '[A-Zrt]'	Letter
  '\"([^\"]|\"\")*\"'		String		[* %match = %match.substr( 1, %match.length - 2 ); %match = %match.replace( /''/g, "\'" );	*]
  '[0-9]+'			Integer
  '[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'	Float
  'Black|Blue|Red|Magenta|Green|Cyan|Yellow'	Color
  'SketchNormal|SketchThick|SketchBroken|SketchDot|SketchThin'	SketchMode
  ;

##

Program:
		Program ':' Stmt [* prgNodes.push(%3); *]
		| Stmt [* prgNodes.push(%1); *]
		;

Stmt:
		Expression '=>' Stmt    [* %% = createNode( NODE_OP, OP_IF_SIMPLE, %1, %3 ); *]
		| IF Expression ':' THEN Stmt [* %% = createNode( NODE_OP, OP_IF, undefined, %2, %5 ); *]
		| IF Expression ':' THEN [* %% = createNode( NODE_OP, OP_IF, undefined, %2 ); *]
		| ELSE Stmt 	[* %% = createNode( NODE_OP, OP_ELSE, %2 ); *]
		| ELSE 	[* %% = createNode( NODE_OP, OP_ELSE ); *]
		| IFEND 	[* %% = createNode( NODE_OP, OP_IFEND ); *]
		| WHILE Expression	[* prgLabels.set("WHL_"+(prgNodes.length), {firstNode: prgNodes.length + 1}); %% = createNode( NODE_OP, OP_WHILE, prgNodes.length, %2 ); *]
		| WHILEEND			[* addAfterNodeToLoop(prgLabels, prgNodes.length + 1, 'WHL_'); %% = createNode( NODE_OP, OP_WHILEEND ); *]
		| DO 				[* prgLabels.set("DO_"+(prgNodes.length), {firstNode: prgNodes.length + 1}); %% = createNode( NODE_OP, OP_DO, prgNodes.length ); *]
		| LPWHILE Expression	[* addAfterNodeToLoop(prgLabels, prgNodes.length + 1, 'DO_'); %% = createNode( NODE_OP, OP_LPWHILE, %2 ); *]
		| FOR Expression '->' VariableCasio TO Expression STEP Expression [* prgLabels.set("FOR_"+(prgNodes.length), {firstNode: prgNodes.length + 1}); %% = createNode( NODE_OP, OP_STMT_COUPLE, createNode( NODE_OP, OP_ASSIGN, %2, %4 ), createNode( NODE_OP, OP_FOR, prgNodes.length, %6, %8 )); *]
		| FOR Expression '->' VariableCasio TO Expression [* prgLabels.set("FOR_"+(prgNodes.length), {firstNode: prgNodes.length + 1}); %% = createNode( NODE_OP, OP_STMT_COUPLE, createNode( NODE_OP, OP_ASSIGN, %2, %4 ), createNode( NODE_OP, OP_FOR, prgNodes.length, %6 )); *]
		| NEXT	[* addAfterNodeToLoop(prgLabels, prgNodes.length + 1, 'FOR_'); %% = createNode( NODE_OP, OP_NEXT); *]
		| BREAK	[* %% = createNode( NODE_OP, OP_BREAK); *]
		| String 		[* %% = createNode( NODE_OP, OP_SAY, %1 ); *]
		| String '?' '->' VariableCasio		[* %% = createNode( NODE_OP, OP_INPUT, %1, %4 ); *]
		| String '?' '->' LIST Integer '[' Expression ']' [* %% = createNode( NODE_OP, OP_INPUT_LIST_ELEM, %1, createNode( NODE_CONST, %5 ), %7 ); *]
		| String '?' '->' LIST Integer '[' Expression [* %% = createNode( NODE_OP, OP_INPUT_LIST_ELEM, %1, createNode( NODE_CONST, %5 ), %7 ); *]
		| String '?' '->' LIST Letter '[' Expression ']' [* %% = createNode( NODE_OP, OP_INPUT_LIST_ELEM, %1, createNode( NODE_VAR, %5 ), %7 ); *]
		| String '?' '->' LIST Letter '[' Expression [* %% = createNode( NODE_OP, OP_INPUT_LIST_ELEM, %1, createNode( NODE_VAR, %5 ), %7 ); *]
		| String '?' '->' MAT Letter '[' Expression ',' Expression ']' [* %% = createNode( NODE_OP, OP_INPUT_MAT_ELEM, %1, createNode( NODE_CONST, %5 ), %7, %9 ); *]
		| String '?' '->' MAT Letter '[' Expression ',' Expression [* %% = createNode( NODE_OP, OP_INPUT_MAT_ELEM, %1, createNode( NODE_CONST, %5 ), %7, %9 ); *]
		| '?' '->' VariableCasio 		[* %% = createNode( NODE_OP, OP_INPUT, "", %3 ); *]
		| '?' '->' LIST Integer '[' Expression ']' [* %% = createNode( NODE_OP, OP_INPUT_LIST_ELEM, "", createNode( NODE_CONST, %4 ), %6 ); *]
		| '?' '->' LIST Integer '[' Expression [* %% = createNode( NODE_OP, OP_INPUT_LIST_ELEM, "", createNode( NODE_CONST, %4 ), %6 ); *]
		| '?' '->' LIST Letter '[' Expression ']' [* %% = createNode( NODE_OP, OP_INPUT_LIST_ELEM, "", createNode( NODE_VAR, %4 ), %6 ); *]
		| '?' '->' LIST Letter '[' Expression [* %% = createNode( NODE_OP, OP_INPUT_LIST_ELEM, "", createNode( NODE_VAR, %4 ), %6 ); *]
		| '?' '->' MAT Letter '[' Expression ',' Expression ']' [* %% = createNode( NODE_OP, OP_INPUT_MAT_ELEM, "", createNode( NODE_CONST, %4 ), %6, %8 ); *]
		| '?' '->' MAT Letter '[' Expression ',' Expression [* %% = createNode( NODE_OP, OP_INPUT_MAT_ELEM, "", createNode( NODE_CONST, %4 ), %6, %8 ); *]
		| Expression 		[* %% = %1; *]
		| LBL Integer 		[* prgLabels.set("LBL_"+%2, prgNodes.length + 1); %% = createNode( NODE_OP, OP_REG_LBL, %2 ); *]
		| LBL Letter 		[* prgLabels.set("LBL_"+%2, prgNodes.length + 1); %% = createNode( NODE_OP, OP_REG_LBL, %2 ); *]
		| GOTO Integer 	[* %% = createNode( NODE_OP, OP_GOTO, %2 ); *]
		| GOTO Letter 		[* %% = createNode( NODE_OP, OP_GOTO, %2 ); *]
		| PROG Integer		[* %% = createNode( NODE_OP, OP_PROG_CALL, %2 ); *]
		| PROG Letter		[* %% = createNode( NODE_OP, OP_PROG_CALL, %2 ); *]
		| PROG String		[* %% = createNode( NODE_OP, OP_PROG_CALL, %2 ); *]
		| Expression '->' GraphVar [* %% = createNode( NODE_OP, OP_ASSIGN_GRAPHVAR, %1, %3 ); *]
		| Expression '->' VariableCasio '~' VariableCasio [* %% = createNode( NODE_OP, OP_ASSIGN, %1, %3, %5 ); *]
		| Expression '->' VariableCasio [* %% = createNode( NODE_OP, OP_ASSIGN, %1, %3 ); *]
		| Expression '->' LIST Integer '[' Expression ']' [* %% = createNode( NODE_OP, OP_SET_LIST_ELEM, %1, createNode( NODE_CONST, %4 ), %6 ); *]
		| Expression '->' LIST Letter '[' Expression ']' [* %% = createNode( NODE_OP, OP_SET_LIST_ELEM, %1, createNode( NODE_VAR, %4 ), %6 ); *]
		| Expression '->' LIST Integer '[' Expression [* %% = createNode( NODE_OP, OP_SET_LIST_ELEM, %1, createNode( NODE_CONST, %4 ), %6 ); *]
		| Expression '->' LIST Letter '[' Expression [* %% = createNode( NODE_OP, OP_SET_LIST_ELEM, %1, createNode( NODE_VAR, %4 ), %6 ); *]
		| Expression '->' MAT Letter '[' Expression ',' Expression ']' [* %% = createNode( NODE_OP, OP_SET_MAT_ELEM, %1, createNode( NODE_CONST, %4 ), %6, %8 ); *]
		| Expression '->' MAT Letter '[' Expression ',' Expression [* %% = createNode( NODE_OP, OP_SET_MAT_ELEM, %1, createNode( NODE_CONST, %4 ), %6, %8 ); *]
		| ISZ VariableCasio [* %% = createNode( NODE_OP, OP_INCR, %2 ); *]
		| DSZ VariableCasio [* %% = createNode( NODE_OP, OP_DECR, %2 ); *]
		| PLOT Expression ',' Expression [* %% = createNode( NODE_OP, OP_PLOT, %2, %4 ); *]
		| PLOTON Expression ',' Expression [* %% = createNode( NODE_OP, OP_PLOT_ON, %2, %4 ); *]
		| Color PLOT Expression ',' Expression [* %% = createNode( NODE_OP, OP_PLOT, %3, %5, %1 ); *]
		| Color PLOTON Expression ',' Expression [* %% = createNode( NODE_OP, OP_PLOT_ON, %3, %5, %1 ); *]
		| PLOTOFF Expression ',' Expression [* %% = createNode( NODE_OP, OP_PLOT_OFF, %2, %4 ); *]
		| PLOTCHG Expression ',' Expression [* %% = createNode( NODE_OP, OP_PLOT_CHG, %2, %4 ); *]
		| PXLON Expression ',' Expression [* %% = createNode( NODE_OP, OP_PXL_ON, %2, %4 ); *]
		| Color PXLON Expression ',' Expression [* %% = createNode( NODE_OP, OP_PXL_ON, %3, %5, %1 ); *]
		| PXLOFF Expression ',' Expression [* %% = createNode( NODE_OP, OP_PXL_OFF, %2, %4 ); *]
		| PXLCHG Expression ',' Expression [* %% = createNode( NODE_OP, OP_PXL_CHG, %2, %4 ); *]
		| "REC\(" Expression ',' Expression '\)' [* %% = createNode( NODE_OP, OP_REC, %2, %4 ); *]
		| "POL\(" Expression ',' Expression '\)' [* %% = createNode( NODE_OP, OP_POL, %2, %4 ); *]
		| HORIZONTAL Expression [* %% = createNode( NODE_OP, OP_HORIZONTAL, %2 ); *]
		| Color HORIZONTAL Expression [* %% = createNode( NODE_OP, OP_HORIZONTAL, %3, %1 ); *]
		| SketchMode HORIZONTAL Expression [* %% = createNode( NODE_OP, OP_HORIZONTAL, %3, undefined, %1 ); *]
		| Color SketchMode HORIZONTAL Expression [* %% = createNode( NODE_OP, OP_HORIZONTAL, %4, %1, %2 ); *]
		| VERTICAL Expression [* %% = createNode( NODE_OP, OP_VERTICAL, %2 ); *]
		| Color VERTICAL Expression [* %% = createNode( NODE_OP, OP_VERTICAL, %3, %1 ); *]
		| SketchMode VERTICAL Expression [* %% = createNode( NODE_OP, OP_VERTICAL, %3, undefined, %1 ); *]
		| Color SketchMode VERTICAL Expression [* %% = createNode( NODE_OP, OP_VERTICAL, %4, %1, %2 ); *]
		| RANGE Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_RANGE, %2, %4, %6, %8, %10, %12 ); *]
		| VIEWWINDOW Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_RANGE, %2, %4, %6, %8, %10, %12, %14, %16, %18 ); *]
		| VIEWWINDOW Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_RANGE, %2, %4, %6, %8, %10, %12, %14, %16 ); *]
		| VIEWWINDOW Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_RANGE, %2, %4, %6, %8, %10, %12, %14 ); *]
		| VIEWWINDOW Expression ',' Expression ',' Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_RANGE, %2, %4, %6, %8, %10, %12 ); *]
		| VIEWWINDOW Expression ',' Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_RANGE, %2, %4, %6, %8, %10); *]
		| VIEWWINDOW Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_RANGE, %2, %4, %6, %8); *]
		| MENU String ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter [* %% = createNode( NODE_OP, OP_MENU, %2, %4, %6, %8, %10 ); *]
		| MENU String ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter [* %% = createNode( NODE_OP, OP_MENU, %2, %4, %6, %8, %10, %12, %14 ); *]
		| MENU String ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter [* %% = createNode( NODE_OP, OP_MENU, %2, %4, %6, %8, %10, %12, %14, %16, %18 ); *]
		| MENU String ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter [* %% = createNode( NODE_OP, OP_MENU, %2, %4, %6, %8, %10, %12, %14, %16, %18, %20, %22 ); *]
		| MENU String ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter [* %% = createNode( NODE_OP, OP_MENU, %2, %4, %6, %8, %10, %12, %14, %16, %18, %20, %22, %24, %26 ); *]
		| MENU String ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter [* %% = createNode( NODE_OP, OP_MENU, %2, %4, %6, %8, %10, %12, %14, %16, %18, %20, %22, %24, %26, %28, %30 ); *]
		| MENU String ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter [* %% = createNode( NODE_OP, OP_MENU, %2, %4, %6, %8, %10, %12, %14, %16, %18, %20, %22, %24, %26, %28, %30, %32, %34 ); *]
		| MENU String ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter ',' String ',' IntegerOrLetter [* %% = createNode( NODE_OP, OP_MENU, %2, %4, %6, %8, %10, %12, %14, %16, %18, %20, %22, %24, %26, %28, %30, %32, %34, %36, %38 ); *]
		| F-LINE Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_FLINE, %2, %4, %6, %8 ); *]
		| Color F-LINE Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_FLINE, %3, %5, %7, %9, %1 ); *]
		| SketchMode F-LINE Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_FLINE, %3, %5, %7, %9, undefined, %1 ); *]
		| Color SketchMode F-LINE Expression ',' Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_FLINE, %4, %6, %8, %10, %1, %2 ); *]
		| CIRCLE Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_CIRCLE, %2, %4, %6 ); *]
		| Color CIRCLE Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_CIRCLE, %3, %5, %7, %1 ); *]
		| SketchMode CIRCLE Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_CIRCLE, %3, %5, %7, undefined, %1 ); *]
		| Color SketchMode CIRCLE Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_CIRCLE, %4, %6, %8, %1, %2 ); *]
		| LOCATE Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_LOCATE, %2, %4, %6); *]
		| LOCATE Expression ',' Expression ',' String [* %% = createNode( NODE_OP, OP_LOCATE, %2, %4, %6); *]
		| Color LOCATE Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_LOCATE, %3, %5, %7, %1); *]
		| Color LOCATE Expression ',' Expression ',' String [* %% = createNode( NODE_OP, OP_LOCATE, %3, %5, %7, %1); *]
		| TEXT Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_TEXT, %2, %4, %6); *]
		| TEXT Expression ',' Expression ',' String [* %% = createNode( NODE_OP, OP_TEXT, %2, %4, %6); *]
		| Color TEXT Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_TEXT, %3, %5, %7, %1); *]
		| Color TEXT Expression ',' Expression ',' String [* %% = createNode( NODE_OP, OP_TEXT, %3, %5, %7, %1); *]
		| SketchMode TEXT Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_TEXT, %3, %5, %7); *]
		| SketchMode TEXT Expression ',' Expression ',' String [* %% = createNode( NODE_OP, OP_TEXT, %3, %5, %7); *]
		| Color SketchMode TEXT Expression ',' Expression ',' Expression [* %% = createNode( NODE_OP, OP_TEXT, %4, %6, %8, %1); *]
		| Color SketchMode TEXT Expression ',' Expression ',' String [* %% = createNode( NODE_OP, OP_TEXT, %4, %6, %8, %1); *]
		| RETURN [* %% = createNode( NODE_OP, OP_RETURN ); *]
		| STOP [* %% = createNode( NODE_OP, OP_STOP ); *]
		| DEG [* %% = createNode( NODE_OP, OP_DEG ); *]
		| RAD [* %% = createNode( NODE_OP, OP_RAD ); *]
		| GRAD [* %% = createNode( NODE_OP, OP_GRAD ); *]
		| _DISP_ [* %% = createNode( NODE_OP, OP_DISP ); *]
		| LINE [* %% = createNode( NODE_OP, OP_LINE ); *]
		| Color LINE [* %% = createNode( NODE_OP, OP_LINE, %1 ); *]
		| CLRTEXT [* %% = createNode( NODE_OP, OP_CLEARTEXT ); *]
		| CLRGRAPH [* %% = createNode( NODE_OP, OP_CLEARGRAPH ); *]
		| AXESON [* %% = createNode( NODE_OP, OP_SHOWAXES, true ); *]
		| AXESOFF [* %% = createNode( NODE_OP, OP_SHOWAXES, false ); *]
		| LABELON [* %% = createNode( NODE_OP, OP_SHOWLABEL, true ); *]
		| LABELOFF [* %% = createNode( NODE_OP, OP_SHOWLABEL, false ); *]
		| GRIDON [* %% = createNode( NODE_OP, OP_SHOWGRID, GRID_ON ); *]
		| GRIDOFF [* %% = createNode( NODE_OP, OP_SHOWGRID, GRID_OFF ); *]
		| GRIDLINE [* %% = createNode( NODE_OP, OP_SHOWGRID, GRID_LINE ); *]
		| G-CONNECT [* %% = createNode( NODE_OP, OP_SET_GRAPHMODE, G_CONNECT ); *]
		| G-PLOT [* %% = createNode( NODE_OP, OP_SET_GRAPHMODE, G_PLOT ); *]
		| FUNCON [* %% = createNode( NODE_OP, OP_NONE ); *]
		| FUNCOFF [* %% = createNode( NODE_OP, OP_NONE ); *]
		| COORDON [* %% = createNode( NODE_OP, OP_NONE ); *]
		| COORDOFF [* %% = createNode( NODE_OP, OP_NONE ); *]
		| S-L-NORMAL [* %% = createNode( NODE_OP, OP_SKETCHMODE, "SketchNormal" ); *]
		| S-L-DOT [* %% = createNode( NODE_OP, OP_SKETCHMODE, "SketchDot" ); *]
		| S-L-BROKEN [* %% = createNode( NODE_OP, OP_SKETCHMODE, "SketchBroken" ); *]
		| S-L-THICK [* %% = createNode( NODE_OP, OP_SKETCHMODE, "SketchThick" ); *]
		| S-L-THIN [* %% = createNode( NODE_OP, OP_SKETCHMODE, "SketchThin" ); *]
		| CLRLIST [* %% = createNode( NODE_OP, OP_CLEARLIST ); *]
		| CLRLIST Integer [* %% = createNode( NODE_OP, OP_CLEARLIST, createNode( NODE_CONST, %2 ) ); *]
		| CLRLIST Letter [* %% = createNode( NODE_OP, OP_CLEARLIST, createNode( NODE_VAR, %2 )); *]
		| CLRMAT [* %% = createNode( NODE_OP, OP_CLEARMAT ); *]
		| CLRMAT Letter [* %% = createNode( NODE_OP, OP_CLEARMAT, createNode( NODE_CONST, %2 )); *]
		| FILE Integer [* %% = createNode( NODE_OP, OP_SELECTFILE, %2 ); *]
		| CLS [* %% = createNode( NODE_OP, OP_CLS ); *]
		| MCL [* %% = createNode( NODE_OP, OP_MCL ); *]
		| AList '->' LIST Integer	[* %% = createNode( NODE_OP, OP_ASSIGN_TO_LIST, %1, createNode( NODE_CONST, %4 ) ); *]
		| AList '->' LIST Letter	[* %% = createNode( NODE_OP, OP_ASSIGN_TO_LIST, %1, createNode( NODE_VAR, %4 ) ); *]
		| AList	[* %% = %1; *]
		| AMat '->' MAT Letter	[* %% = createNode( NODE_OP, OP_ASSIGN_TO_MAT, %1, createNode( NODE_CONST, %4 ) ); *]
		| AMat [* %% = %1; *]
		| SORTA '(' LIST Integer	[* %% = createNode( NODE_OP, OP_SORTA_LIST, createNode( NODE_CONST, %4 ) ); *]
		| SORTA '(' LIST Letter	[* %% = createNode( NODE_OP, OP_SORTA_LIST, createNode( NODE_VAR, %4 ) ); *]
		| SORTA '(' LIST Integer ')'	[* %% = createNode( NODE_OP, OP_SORTA_LIST, createNode( NODE_CONST, %4 ) ); *]
		| SORTA '(' LIST Letter ')'[* %% = createNode( NODE_OP, OP_SORTA_LIST, createNode( NODE_VAR, %4 ) ); *]
		| SORTD '(' LIST Integer	[* %% = createNode( NODE_OP, OP_SORTD_LIST, createNode( NODE_CONST, %4 ) ); *]
		| SORTD '(' LIST Letter	[* %% = createNode( NODE_OP, OP_SORTD_LIST, createNode( NODE_VAR, %4 ) ); *]
		| SORTD '(' LIST Integer ')'	[* %% = createNode( NODE_OP, OP_SORTD_LIST, createNode( NODE_CONST, %4 ) ); *]
		| SORTD '(' LIST Letter ')'	[* %% = createNode( NODE_OP, OP_SORTD_LIST, createNode( NODE_VAR, %4 ) ); *]
		| FILL '(' Expression ',' LIST Integer ')'	[* %% = createNode( NODE_OP, OP_FILL_LIST, %3, createNode( NODE_CONST, %6 ) ); *]
		| FILL '(' Expression ',' LIST Letter ')'	[* %% = createNode( NODE_OP, OP_FILL_LIST, %3, createNode( NODE_VAR, %6 ) ); *]
		| FILL '(' Expression ',' MAT Letter ')'	[* %% = createNode( NODE_OP, OP_FILL_MAT, %3, createNode( NODE_CONST, %6 ) ); *]
		| Expression '->' DIM LIST Integer	[* %% = createNode( NODE_OP, OP_SET_DIM_LIST, %1, createNode( NODE_CONST, %5 ) ); *]
		| Expression '->' DIM LIST Letter	[* %% = createNode( NODE_OP, OP_SET_DIM_LIST, %1, createNode( NODE_VAR, %5 ) ); *]
		| AList '->' DIM MAT Letter	[* %% = createNode( NODE_OP, OP_SET_DIM_MAT, %1, createNode( NODE_CONST, %5 ) ); *]
		| "PLOT/LINE-COLOR" Color 	[* %% = createNode( NODE_OP, OP_SET_DRAW_COLOR, %2 ); *]
		| "BG-NONE" 	[* %% = createNode( NODE_OP, OP_BGNONE ); *]
		| "BG-PICT" Integer	[* %% = createNode( NODE_OP, OP_BGPICT, createNode( NODE_CONST, %2 ) ); *]
		| "BG-PICT" Letter	[* %% = createNode( NODE_OP, OP_BGPICT, createNode( NODE_VAR, %2 ) ); *]
		| STOPICT Integer	[* %% = createNode( NODE_OP, OP_STOPICT, createNode( NODE_CONST, %2 ) ); *]
		| STOPICT Letter	[* %% = createNode( NODE_OP, OP_STOPICT, createNode( NODE_VAR, %2 ) ); *]
		| RCLPICT Integer	[* %% = createNode( NODE_OP, OP_RCLPICT, createNode( NODE_CONST, %2 ) ); *]
		| RCLPICT Letter	[* %% = createNode( NODE_OP, OP_RCLPICT, createNode( NODE_VAR, %2 ) ); *]
		| "GRAPH\(X,Y\)=\(" ExprOrList ',' ExprOrList ')'	[* %% = createNode( NODE_OP, OP_GRAPHXY, %2, %4 ); *]
		| "GRAPH\(X,Y\)=\(" ExprOrList ',' ExprOrList 	[* %% = createNode( NODE_OP, OP_GRAPHXY, %2, %4 ); *]
		| Color "GRAPH\(X,Y\)=\(" ExprOrList ',' ExprOrList ')'	[* %% = createNodeWithDebugInfo( NODE_OP, OP_GRAPHXY, %3, %5, %1 ); *]
		| Color "GRAPH\(X,Y\)=\(" ExprOrList ',' ExprOrList 	[* %% = createNodeWithDebugInfo( NODE_OP, OP_GRAPHXY, %3, %5, %1 ); *]
		| SketchMode "GRAPH\(X,Y\)=\(" ExprOrList ',' ExprOrList ')'	[* %% = createNodeWithDebugInfo( NODE_OP, OP_GRAPHXY, info, %3, %5, undefined, %1 ); *]
		| SketchMode "GRAPH\(X,Y\)=\(" ExprOrList ',' ExprOrList 	[* %% = createNodeWithDebugInfo( NODE_OP, OP_GRAPHXY, info, %3, %5, undefined, %1 ); *]
		| Color SketchMode "GRAPH\(X,Y\)=\(" ExprOrList ',' ExprOrList ')'	[* %% = createNodeWithDebugInfo( NODE_OP, OP_GRAPHXY, info, %4, %6, %1, %2 ); *]
		| Color SketchMode "GRAPH\(X,Y\)=\(" ExprOrList ',' ExprOrList 	[* %% = createNodeWithDebugInfo( NODE_OP, OP_GRAPHXY, info, %4, %6, %1, %2 ); *]
		;

ExprOrList:
		Expression
		| AList
		;

AList:
		'{' Expr_List '}'	[* %% = %2; *]
		| '{' Expr_List 	[* %% = %2; *]
		| "SEQ\(" Expression ',' VariableCasio ',' Expression ',' Expression ',' Expression ')' 	[* %% = createNode( NODE_OP, OP_CREATE_SEQ, %2, %4, %6, %8, %10); *]
		| "SEQ\(" Expression ',' VariableCasio ',' Expression ',' Expression ',' Expression 	[* %% = createNode( NODE_OP, OP_CREATE_SEQ, %2, %4, %6, %8, %10); *]
		| AUGMENT '(' AList ',' AList ')'	[* %% = createNode( NODE_OP, OP_AUGMENT_LIST, %3, %5 ); *]
		| AUGMENT '(' AList ',' AList [* %% = createNode( NODE_OP, OP_AUGMENT_LIST, %3, %5 ); *]
		| "RANINT#" '(' Expression ',' Expression ',' Expression ')' [* %% = createNode( NODE_OP, OP_RANINT_LIST, %3, %5, %7 ); *]
		| "RANLIST#\(" Expression ')' [* %% = createNode( NODE_OP, OP_RAN_LIST, %2 ); *]
		| CUML AList [* %% = createNode( NODE_OP, OP_CUML_LIST, %2 ); *]
		| PERCENT AList [* %% = createNode( NODE_OP, OP_PERCENT_LIST, %2 ); *]
		| "\?LIST" AList [* %% = createNode( NODE_OP, OP_VARIATION_LIST, %2 ); *]
		| LIST Letter 	[* %% = createNode( NODE_OP, OP_READ_LIST, createNode( NODE_VAR, %2 ) ); *]
		| LIST Integer 	[* %% = createNode( NODE_OP, OP_READ_LIST, createNode( NODE_CONST, %2 ) ); *]
		| LIST ANS 	[* %% = createNode( NODE_OP, OP_LIST_ANS ); *]
		| DIM MAT ANS [* %% = createNode( NODE_OP, OP_GET_DIM_MAT ); *]
		| DIM MAT Letter [* %% = createNode( NODE_OP, OP_GET_DIM_MAT, createNode( NODE_CONST, %3 ) ); *]
		| "MAT->LIST\(" Letter ',' Expression ')' [* %% = createNode( NODE_OP, OP_MAT_TO_LIST, createNode( NODE_CONST, %2 ), %4 ); *]
		| "MAT->LIST\(" Letter ',' Expression [* %% = createNode( NODE_OP, OP_MAT_TO_LIST, createNode( NODE_CONST, %2 ), %4 ); *]
		;

AMat:
		'[' MatRows ']' [* %% = %2; *]
		| '[' MatRows     [* %% = %2; *]
		| AUGMENT '(' AMat ',' AMat ')'	[* %% = createNode( NODE_OP, OP_AUGMENT_MAT, %3, %5 ); *]
		| AUGMENT '(' AMat ',' AMat [* %% = createNode( NODE_OP, OP_AUGMENT_MAT, %3, %5 ); *]
		| MAT Letter 	[* %% = createNode( NODE_OP, OP_READ_MAT, createNode( NODE_CONST, %2 ) ); *]
		| MAT ANS 	[* %% = createNode( NODE_OP, OP_READ_MAT ); *]
		| TRN AMat 	[* %% = createNode( NODE_OP, OP_TRN_MAT, %2 ); *]
		| "LIST->MAT\(" Expr_List ')'	[* %% = createNodeWithDebugInfo( NODE_OP, OP_LISTS_TO_MAT, info, %2 ); *]
		| "LIST->MAT\(" Expr_List	[* %% = createNodeWithDebugInfo( NODE_OP, OP_LISTS_TO_MAT, info, %2 ); *]
		;

MatRows:
		MatRows '[' Expr_List ']' [* %% = createNode( NODE_OP, OP_PUSH_MAT_ROW, %1, %3 ); *]
		| MatRows '[' Expr_List     [* %% = createNode( NODE_OP, OP_PUSH_MAT_ROW, %1, %3 ); *]
		| '[' Expr_List ']' [* %% = createNode( NODE_OP, OP_PUSH_MAT_ROW, null, %2 ); *]
		| '[' Expr_List   [* %% = createNode( NODE_OP, OP_PUSH_MAT_ROW, null, %2 ); *]
		;

Expr_List:
		Expr_List ',' Expression	[* %% = createNode( NODE_OP, OP_PUSH_TO_ARRAY, %1, %3 ); *]
		| Expression				[* %% = createNode( NODE_OP, OP_PUSH_TO_ARRAY, null, %1 ); *]
		;

Expression:
		Expression OR AndExp	[* %% = createNode( NODE_OP, OP_OR, %1, %3); *]
		| Expression XOR AndExp	[* %% = createNode( NODE_OP, OP_XOR, %1, %3); *]
		| AndExp
		;

AndExp:
		AndExp AND NotExp	[* %% = createNode( NODE_OP, OP_AND, %1, %3); *]
		| NotExp
		;

NotExp:
		NOT CondExpression	[* %% = createNode( NODE_OP, OP_NOT, %2); *]
		| CondExpression
		;

CondExpression:
		CondExpression '=' AddSubExp	[* %% = createNode( NODE_OP, OP_EQU, %1, %3 ); *]
		| CondExpression '<' AddSubExp	[* %% = createNode( NODE_OP, OP_LOT, %1, %3 ); *]
		| CondExpression '>' AddSubExp	[* %% = createNode( NODE_OP, OP_GRT, %1, %3 ); *]
		| CondExpression '<=' AddSubExp	[* %% = createNode( NODE_OP, OP_LOE, %1, %3 ); *]
		| CondExpression '>=' AddSubExp	[* %% = createNode( NODE_OP, OP_GRE, %1, %3 ); *]
		| CondExpression '!=' AddSubExp	[* %% = createNode( NODE_OP, OP_NEQ, %1, %3 ); *]
		| CondExpression '<>' AddSubExp	[* %% = createNode( NODE_OP, OP_NEQ, %1, %3 ); *]
		| AddSubExp
		;

AddSubExp:
		AddSubExp '-' MulDivExp		[* %% = createNode( NODE_OP, OP_SUB, %1, %3 ); *]
		| AddSubExp '+' MulDivExp	[* %% = createNode( NODE_OP, OP_ADD, %1, %3 ); *]
		| MulDivExp
		;

MulDivExp:
		MulDivExp '*' NegExp		[* %% = createNode( NODE_OP, OP_MUL, %1, %3 ); *]
		| MulDivExp '/' NegExp		[* %% = createNode( NODE_OP, OP_DIV, %1, %3 ); *]
		| NegExp
		;

NegExp:
		COS Value [* %% = createNode( NODE_OP, OP_COS, %2 ); *]
		| SIN Value [* %% = createNode( NODE_OP, OP_SIN, %2 ); *]
		| TAN Value [* %% = createNode( NODE_OP, OP_TAN, %2 ); *]
		| INT Value [* %% = createNode( NODE_OP, OP_INT, %2 ); *]
		| MOD '(' Expression ',' Expression [* %% = createNode( NODE_OP, OP_MOD, %3, %5 ); *]
		| MOD '(' Expression ',' Expression ')' [* %% = createNode( NODE_OP, OP_MOD, %3, %5 ); *]
		| FRAC Value [* %% = createNode( NODE_OP, OP_FRAC, %2 ); *]
		| INTG Value [* %% = createNode( NODE_OP, OP_INTG, %2 ); *]
		| ABS Value [* %% = createNode( NODE_OP, OP_ABS, %2 ); *]
		| Value
		| ;

Value:
		'-' Value [* %% = createNode( NODE_OP, OP_NEG, %2 ); *]
		| Value FinalVariable [* %% = createNode( NODE_OP, OP_MUL, %1, %2 ); *]
		| Integer [* %% = createNode( NODE_CONST, %1 ); *]
		| Float [* %% = createNode( NODE_CONST, %1 ); *]
		| FinalVariable [* %% = %1; *]
		| Value '(' Expression ')' [* %% = createNode( NODE_OP, OP_MUL, %1, %3 ); *]
		| '(' Expression ')' [* %% = %2; *]
		| '(' Expression [* %% = %2; *]
		;

FinalVariable:
		GETKEY [* %% = createNode( NODE_OP, OP_GETKEY ); *]
		| PI [* %% = createNode( NODE_OP, OP_PI ); *]
		| ANS [* %% = createNode( NODE_OP, OP_ANS ); *]
		| RAN '#' [* %% = createNode( NODE_OP, OP_RANDOM ); *]
		| "RANINT#" '(' Expression ',' Expression ')' [* %% = createNode( NODE_OP, OP_RANINT, %3, %5 ); *]
		| "RANINT#" '(' Expression ',' Expression [* %% = createNode( NODE_OP, OP_RANINT, %3, %5 ); *]
		| PXLTEST Expression ',' Expression [* %% = createNode( NODE_OP, OP_PXL_TEST, %2, %4 ); *]
		| PXLTEST '(' Expression ',' Expression ')' [* %% = createNode( NODE_OP, OP_PXL_TEST, %3, %5 ); *]
		| PXLTEST '(' Expression ',' Expression [* %% = createNode( NODE_OP, OP_PXL_TEST, %3, %5 ); *]
		| MIN '(' AList	[* %% = createNode( NODE_OP, OP_MIN_LIST, %3); *]
		| MIN '(' AList	')' [* %% = createNode( NODE_OP, OP_MIN_LIST, %3); *]
		| MAX '(' AList	[* %% = createNode( NODE_OP, OP_MAX_LIST, %3); *]
		| MAX '(' AList ')'	[* %% = createNode( NODE_OP, OP_MAX_LIST, %3); *]
		| SUM AList [* %% = createNode( NODE_OP, OP_SUM_LIST, %2); *]
		| PROD AList [* %% = createNode( NODE_OP, OP_PROD_LIST, %2); *]
		| MEAN '(' AList [* %% = createNode( NODE_OP, OP_MEAN_LIST, %3); *]
		| MEAN '(' AList ')' [* %% = createNode( NODE_OP, OP_MEAN_LIST, %3); *]
		| MEDIAN '(' AList [* %% = createNode( NODE_OP, OP_MEDIAN_LIST, %3); *]
		| MEDIAN '(' AList ')' [* %% = createNode( NODE_OP, OP_MEDIAN_LIST, %3); *]
		| DIM LIST ANS [* %% = createNodeWithDebugInfo( NODE_OP, OP_GET_DIM_LIST, info ); *]
		| DIM LIST Integer [* %% = createNodeWithDebugInfo( NODE_OP, OP_GET_DIM_LIST, info, createNode( NODE_CONST, %3 ) ); *]
		| DIM LIST Letter [* %% = createNodeWithDebugInfo( NODE_OP, OP_GET_DIM_LIST, info, createNode( NODE_VAR, %3 ) ); *]
		| VariableCasio
		| GraphVar
		| ListElem
		| MatElem
		;

MatElem:
		| MAT ANS '[' Expression ',' Expression ']' [* %% = createNode( NODE_OP, OP_GET_MAT_ELEM, %4, %6 ); *]
		| MAT ANS '[' Expression ',' Expression     [* %% = createNode( NODE_OP, OP_GET_MAT_ELEM, %4, %6 ); *]
		| MAT Letter '[' Expression ',' Expression ']' [* %% = createNode( NODE_OP, OP_GET_MAT_ELEM, %4, %6, createNode( NODE_CONST, %2 ) ); *]
		| MAT Letter '[' Expression ',' Expression     [* %% = createNode( NODE_OP, OP_GET_MAT_ELEM, %4, %6, createNode( NODE_CONST, %2 ) ); *]
		;

ListElem:
		| LIST ANS '[' Expression   [* %% = createNode( NODE_OP, OP_GET_LIST_ELEM, %4 ); *]
		| LIST ANS '[' Expression ']' [* %% = createNode( NODE_OP, OP_GET_LIST_ELEM, %4 ); *]
		| LIST Integer '[' Expression ']' [* %% = createNode( NODE_OP, OP_GET_LIST_ELEM, createNode( NODE_CONST, %2 ), %4 ); *]
		| LIST Letter '[' Expression ']' [* %% = createNode( NODE_OP, OP_GET_LIST_ELEM, createNode( NODE_VAR, %2 ), %4 ); *]
		| LIST Integer '[' Expression   [* %% = createNode( NODE_OP, OP_GET_LIST_ELEM, createNode( NODE_CONST, %2 ), %4 ); *]
		| LIST Letter '[' Expression   [* %% = createNode( NODE_OP, OP_GET_LIST_ELEM, createNode( NODE_VAR, %2 ), %4 ); *]
		;

VariableCasio:
		Letter '[' Expression ']' [* %% = createNode( NODE_OP, OP_READVAR, %1, %3 ); *]
		| Letter [* %% = createNode( NODE_VAR, %1 ); *]
		;

GraphVar:
		XMIN [* %% = createNode( NODE_GRPHVAR, GRPHVAR_XMIN ); *]
		| XMAX [* %% = createNode( NODE_GRPHVAR, GRPHVAR_XMAX ); *]
		| XSCL [* %% = createNode( NODE_GRPHVAR, GRPHVAR_XSCL ); *]
		| XDOT [* %% = createNode( NODE_GRPHVAR, GRPHVAR_XDOT ); *]
		| YMIN [* %% = createNode( NODE_GRPHVAR, GRPHVAR_YMIN ); *]
		| YMAX [* %% = createNode( NODE_GRPHVAR, GRPHVAR_YMAX ); *]
		| YSCL [* %% = createNode( NODE_GRPHVAR, GRPHVAR_YSCL ); *]
		| TTMIN [* %% = createNode( NODE_GRPHVAR, GRPHVAR_TTMIN ); *]
		| TTMAX [* %% = createNode( NODE_GRPHVAR, GRPHVAR_TTMAX ); *]
		| TTPTCH [* %% = createNode( NODE_GRPHVAR, GRPHVAR_TTPTCH ); *]
		;

IntegerOrLetter:
		Integer
		| Letter
		;